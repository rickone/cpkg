#!/bin/bash

mk_config="config.mk"
deps=()

function mk_file() {
    local mf="$CWORK_PATH/etc/template.mk"
    if [ ! -f $mf ]; then
        echo "can't find template.mk, set env.CWORK_PATH to figure out!" >&2
        exit 1
    fi

    echo $mf
}

function new() {
    if [ -f $mk_config ]; then
        echo "$mk_config exists!" >&2
        exit 2
    fi

    if [ "$1" == "" ]; then
        echo "cmk new <Target>"
        echo "<Target>: xx, libxx.a or libxx.so"
        exit
    fi

    echo "Target = $1" >> $mk_config
    echo "Source = \$(wildcard src/*.cpp src/*.c)" >> $mk_config
    echo "Test = \$(wildcard test/*.cpp test/*.c)" >> $mk_config
    echo "Lib =" >> $mk_config
    echo "LibPath =" >> $mk_config
    echo "Include =" >> $mk_config
    echo "Define =" >> $mk_config
    echo "CFLAGS = -g -D_DEBUG -Wall" >> $mk_config
    echo "CXXFLAGS = -std=c++14" >> $mk_config
    echo "LDFLAGS =" >> $mk_config
    echo "Rpath =" >> $mk_config
}

function mk() {
    if [ -d "vendor" ]; then
        VendorPath=vendor
    fi

    if [ -f $mk_config ]; then
        Import=${deps[@]} VendorPath=$VendorPath CWORK_PATH=$CWORK_PATH CMK_CONFIG=$mk_config make -f $(mk_file) $@
        return
    fi

    local pwd=`pwd`
    local pkg=${pwd##$CWORK_PATH/src/}
    if [ -f "$CWORK_PATH/mksh/$pkg/build.sh" ]; then
        sh $CWORK_PATH/mksh/$pkg/build.sh
        return
    fi

    echo "can't find $mk_config or $CWORK_PATH/mksh/$pkg/build.sh!" >&2
    exit 3
}

function all() {
    deps=($(cdep list))
    for pkg in ${deps[@]}; do
        (
            cget $pkg
            cd $CWORK_PATH/src/$pkg
            cmk $@
        )
    done
    mk $@
    mk test $@

    # for runtime load
    for pkg in ${deps[@]}; do
        if [ -d "vendor/$pkg/lib" ]; then
            for so in `ls vendor/$pkg/lib/*.so 2>/dev/null`; do
                (
                    cd lib
                    ln -s ../$so ${so##*/}
                )
            done
            continue
        fi

        if [ -d "$CWORK_PATH/src/$pkg/lib" ]; then
            for so in `ls $CWORK_PATH/src/$pkg/lib/*.so 2>/dev/null`; do
                (
                    cd lib
                    ln -s $so ${so##*/}
                )
            done
        fi
    done
}

function vendor() {
    rm -rf vendor/*

    deps=($(cdep list))
    for pkg in ${deps[@]}; do
        (
            cget $pkg
            cd $CWORK_PATH/src/$pkg
            cmk $@
        )
        if [ -d "$CWORK_PATH/src/$pkg/include" ]; then
            mkdir -p vendor/$pkg/include
            cp $CWORK_PATH/src/$pkg/include/*.h vendor/$pkg/include
        fi

        if [ -d "$CWORK_PATH/src/$pkg/lib" ]; then
            mkdir -p vendor/$pkg/lib
            cp $CWORK_PATH/src/$pkg/lib/* vendor/$pkg/lib
        fi
    done
}

if [ "$CWORK_PATH" == "" ]; then
    CWORK_PATH=`echo ~`/cwork
fi

case $1 in
    new)
        $@
    ;;
    all)
        $@
    ;;
    vendor)
        $@
    ;;
    clean)
        make -f $(mk_file) clean
    ;;
    help)
        echo "Usage: cmk [new|all|vendor|clean]"
    ;;
    *)
        deps=($(cdep list))
        mk $@
    ;;
esac
