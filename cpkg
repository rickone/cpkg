#!/bin/sh

PKG_DIR="pkg"
PKG_SUM="pkg.sum"

pkgs=()

function usage() {
    echo "Usage: cpkg <add|ensure|update|remove>"
}

function load() {
    if [ -f $1 ]; then
        echo `cat $1`
    fi
}

function save() {
    rm -f $PKG_SUM

    for line in $@; do
        if [ "$line" != "" ]; then
            echo $line >> $PKG_SUM
        fi
    done
}

function list() {
    if [ ! -f $1 ]; then
        return
    fi

    for line in $(load $1); do
        local field=(${line//[=@]/ })
        local name=${field[0]}

        if [ "${pkgs[$name]}" != "" ]; then
            continue
        fi
        
        echo $line
        pkgs[$name]="done"
        list $PKG_DIR/$name/$PKG_SUM
    done
}

function add() {
    if [ "$1" == "" -o "$2" == "" ]; then
        echo "add <pkg> <repository-url>"
        return
    fi

    local data=($(load $PKG_SUM))
    for line in ${data[@]}; do
        local field=(${line//[=@]/ })
        local name=${field[0]}

        if [ "$name" == "$1" ]; then
            echo "package '$1' exists!" >&2
            exit 1
        fi
    done

    git clone $2 $PKG_DIR/$1
    local head_rev=`cd $PKG_DIR/$1 && git rev-parse HEAD`

    save ${data[@]} "$1=$2@$head_rev"
}

function ensure() {
    if [ ! -f $1 ]; then
        return
    fi

    for line in $(load $1); do
        local field=(${line//[=@]/ })
        local name=${field[0]}
        local url=${field[1]}
        local rev=${field[2]}

        if [ "${pkgs[$name]}" != "" ]; then
            continue
        fi

        if [ -d $PKG_DIR/$name ]; then
            local head_rev=`cd $PKG_DIR/$name && git rev-parse HEAD`
            if [ "$rev" != "$head_rev" ]; then
                (
                    cd $PKG_DIR/$name
                    git pull
                    git reset --hard $rev
                )
            fi
        else
            git clone $url $PKG_DIR/$name

            local head_rev=`cd $PKG_DIR/$name && git rev-parse HEAD`
            if [ "$rev" != "$head_rev" ]; then
                (
                    cd $PKG_DIR/$name
                    git reset --hard $rev
                )
            fi
        fi

        pkgs[$name]="done"

        ensure $PKG_DIR/$name/$PKG_SUM
    done
}

function update() {
    if [ "$1" == "" ]; then
        echo "update <pkg>"
        return
    fi

    local data=($(load $PKG_SUM))
    local i=0
    for line in ${data[@]}; do
        local field=(${line//[=@]/ })
        local name=${field[0]}
        local url=${field[1]}

        if [ $name == "$1" ]; then
            if [ -d $PKG_DIR/$name ]; then
                (
                    cd $PKG_DIR/$name
                    git pull
                )
            else
                git clone $url $PKG_DIR/$name
            fi
            
            local rev=${field[2]}
            local head_rev=`cd $PKG_DIR/$name && git rev-parse HEAD`
            
            if [ "$rev" != "$head_rev" ]; then
                data[$i]="$name=$url@$head_rev"
                save ${data[@]}
            fi
            return
        fi

        let i++
    done

    echo "package '$1' not exists!" >&2
    exit 2
}

function remove() {
    if [ "$1" == "" ]; then
        echo "remove <pkg>"
        return
    fi

    local data=($(load $PKG_SUM))
    local i=0
    for line in ${data[@]}; do
        local field=(${line//[=@]/ })
        local name=${field[0]}

        if [ $name == "$1" ]; then
            rm -rf $PKG_DIR/$name
            data[$i]=""
            save ${data[@]}
            return
        fi

        let i++
    done
}

function build_pkg() {
    pkgs[$1]="done"

    for line in $(load $PKG_DIR/$1/$PKG_SUM); do
        local field=(${line//[=@]/ })
        local name=${field[0]}

        if [ "${pkgs[$name]}" != "" ]; then
            continue
        fi
        
        build_pkg $name $2
    done

    (
        cd $PKG_DIR/$1
        make BuildPath=$2
    )
}

function build() {
    local build_path=$1
    if [ "$1" == "" ]; then
        build_path="`pwd`/build"
    fi

    for line in $(load $PKG_SUM); do
        local field=(${line//[=@]/ })
        local name=${field[0]}

        build_pkg $name $build_path
    done

    make BuildPath=$build_path
}

case $1 in
    list)
        list $PKG_SUM
    ;;
    add)
        mkdir -p $PKG_DIR
        add $2 $3
    ;;
    ensure)
        mkdir -p $PKG_DIR
        ensure $PKG_SUM
    ;;
    update)
        mkdir -p $PKG_DIR
        update $2
    ;;
    remove)
        remove $2
    ;;
    build)
        build
    ;;
    *)
        usage
    ;;
esac
